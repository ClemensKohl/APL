library(APL)
?runAPL
library(reticulate)
library(APL)
library(roxygen2)
roxygenise()
?runAPL
?runAPL.Seurat
roxygenise()
?runAPL
?cacomp
?ca_coords
library(APL)
load_all()
library(devtools)
load_all()
check()
install.packages("reticulate")
install.packages("reticulate")
check()
library(devtools)
check()
library(reticulate)
remove.packages("reticulate", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
install.packages("reticulate")
install.packages("reticulate")
library(devtools)
load_all()
use_package("reticulate")
use_package("ggrepel")
use_package("ggplot2")
use_package("dplyr")
use_package("plotly")
use_package("Seurat")
use_package("scRNAseq")
check()
check()
use_gpl_license()
?is
use_readme_md()
datmat <- read_tsv("..CA_Rpackage/example_data/input_matrix_DEMO.txt")
library(tidyverse)
datmat <- read_tsv("..CA_Rpackage/example_data/input_matrix_DEMO.txt")
datmat <- read_tsv("../CA_Rpackage/example_data/input_matrix_DEMO.txt")
datmat <- read_tsv("/media/clemens/Foto2/projects/CA_Rpackage/example_data/input_matrix_DEMO.txt")
gene_nms <- datmat$Description
datmat <- as.matrix(datmat[,-1])
rownames(datmat) <- gene_nms
?use_data
usethis::use_data(datmat, name = "datmat")
datmat
usethis::use_data(datmat, name = "datmat")
usethis::use_data(datmat)
load(datmat)
source(datmat)
load_all()
document()
check()
getwd()
library(tidyverse)
?map
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(devtools)
library(devtools)
load_all()
library(APL)
library(APL)
library(dplyr)
library(readr)
set.seed(1234)
# GTEx dataset included in package.
datmat[1:5,1:5]
# Filter out genes without reads
datmat <- datmat[rowSums(datmat) > 0,]
# Change the path to your python installation
reticulate::use_python("/usr/bin/python3", required = TRUE)
ca <- cacomp(obj = datmat,
top = 5000,
python = TRUE)
names(ca)
pd <- pick_dims(obj = ca,
mat = datmat,
method = "elbow_rule",
reps = 3,
return_plot = TRUE,
python = TRUE)
pd$dims
load_all()
ca_3Dplot(obj = ca)
runAPL(obj = datmat,
caobj = ca,
dims = 29,
group = grep("Pancreas", x = colnames(datmat)),
score = TRUE)
ca <- cacomp(obj = datmat,
coords = TRUE,
princ_coords = 1,
dims = 29,
top = 5000,
python = TRUE)
group <-  grep("Pituitary", x = colnames(datmat))
ca <- apl_coords(caobj = ca,
group = group)
ca <- apl_score(caobj = ca,
mat = datmat,
dims = ca$dims,
group = ca$group,
reps = 3)
apl(caobj = ca,
type = "plotly",
rowlabels = TRUE,
collabels = TRUE,
rows_idx = head(ca$APL_score$Row_num,10),
cols_idx = ca$group)
ca <- ca_coords(caobj = ca,
dims = 29,
princ_coords = 1)
ca_biplot(obj = ca)
library(Seurat)
pbmc_small # included in Seurat package
pbmc_small <- cacomp(obj = pbmc_small,
assay = "RNA",
coords = TRUE,
return_input = TRUE)
pd <- pick_dims(pbmc_small,
assay = "RNA",
method = "elbow_rule",
reps = 3,
return_plot = FALSE)
runAPL(pbmc_small,
assay = "RNA",
dims = pd,
group = grep("g1", pbmc_small@meta.data$groups),
score = TRUE,
nrow = 10,
reps = 5,
python = TRUE)
load_all()
document()
pbmc_small <- cacomp(obj = pbmc_small,
assay = "RNA",
coords = TRUE,
return_input = TRUE)
pd <- pick_dims(pbmc_small,
assay = "RNA",
method = "elbow_rule",
reps = 3,
return_plot = FALSE)
runAPL(pbmc_small,
assay = "RNA",
dims = pd,
group = grep("g1", pbmc_small@meta.data$groups),
score = TRUE,
nrow = 10,
reps = 5,
python = TRUE)
library(scRNAseq)
library(scater)
# Load data
sce <- ReprocessedAllenData("tophat_counts")
counts <- assay(sce, "tophat_counts")
libsizes <- colSums(counts)
size.factors <- libsizes/mean(libsizes)
logcounts(sce) <- log2(t(t(counts)/size.factors) + 1)
counts(sce) <- assay(sce, "tophat_counts")
sce <- cacomp(obj = sce, assay = "counts", dims = 50, top = 5000, return_input = TRUE)
pd <- pick_dims(sce, assay = "counts", method = "elbow_rule", return_plot = FALSE)
grp <- grep("L4 Arf5", colData(sce)$Primary.Type)
runAPL(obj = sce,
group = grp,
dims = pd,
assay = "counts",
score = TRUE,
reps = 3,
nrow = 10)
runAPL(pbmc_small,
assay = "RNA",
dims = pd,
group = grep("g1", pbmc_small@meta.data$groups),
score = TRUE,
nrow = 10,
reps = 5,
python = TRUE)
document()
library(reticulate)
conda_create("APLpy")
install_miniconda()
conda_create("APLpy")
conda_install("APLpy", c("numpy", "torch"))
conda_install("APLpy", c("numpy", "pytorch"))
use_condaenv("APLpy")
ca <- cacomp(obj = datmat,
top = 5000,
python = TRUE)
ca <- cacomp(obj = datmat,
top = 5000,
python = TRUE)
import("pytorch")
conda_list()
use_condaenv("APLpy")
import("pytorch")
